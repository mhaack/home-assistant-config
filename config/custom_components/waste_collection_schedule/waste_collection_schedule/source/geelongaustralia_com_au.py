import datetime

import requests
from bs4 import BeautifulSoup
from waste_collection_schedule import Collection

TITLE = "City of Greater Geelong"
DESCRIPTION = "Source City of Greater Geelong rubbish collection"
URL = "https://www.geelongaustralia.com.au/"
TEST_CASES = {
    "155 Mercer Street Geelong 3220": {"address": "155 Mercer Street Geelong 3220"},
    "1/271 Roslyn Road Highton 3216": {"address": "1/271 Roslyn Road Highton 3216"},
    "1a Orton Street Ocean Grove 3226": {"address": "1a Orton Street Ocean Grove 3226"},
    "100-102 Gheringhap Street Geelong 3220": {
        "address": "100-102 Gheringhap Street Geelong 3220"
    },
}

API_URL = "https://www.geelongaustralia.com.au/recycling/calendar.aspx"
ICON_MAP = {
    "Garbage": "mdi:trash-can",
    "Recycling": "mdi:recycle",
    "Green waste": "mdi:leaf",
}

SUBMIT_ARGS = {
    "__VIEWSTATE": "/wEPDwUJLTQyNjIwNzQ4D2QWAmYPZBYCAgMQZGQWDAIDD2QWAmYPZBYCAgcPFgIeB1Zpc2libGVoZAIJD2QWAgIBD2QWBAIFDxYCHgtfIUl0ZW1Db3VudAICFgRmD2QWAmYPFQEhPGEgaHJlZj0iL3NlcnZpY2VzLyI+U2VydmljZXM8L2E+ZAIBD2QWAmYPFQEvPGEgaHJlZj0iL3JlY3ljbGluZy8iPlJ1YmJpc2ggYW5kIHJlY3ljbGluZzwvYT5kAgcPD2QPEBYFZgIBAgICAwIEFgUWBB4MRGVmYXVsdFZhbHVlBQlyZWN5Y2xpbmceDlBhcmFtZXRlclZhbHVlZBYEHwIFDWNhbGVuZGFyLmFzcHgfA2QWBB8CZR8DZBYEHwIFGC9yZWN5Y2xpbmcvY2FsZW5kYXIuYXNweB8DZBYEHwJlHwNkFgUCAwIDAgMCAwIDZGQCCw8PZA8QFgJmAgEWAhYEHwIFDWNhbGVuZGFyLmFzcHgfA2QWBB8CBQlyZWN5Y2xpbmcfA2QWAgIDAgNkZAINDw9kDxAWAmYCARYCFgQfAgUNY2FsZW5kYXIuYXNweB8DZBYEHwIFCXJlY3ljbGluZx8DZBYCAgMCA2RkAhEPZBYGZg9kFgYCDg9kFgICAQ8WAh4EVGV4dAUXQmluIGNvbGxlY3Rpb24gY2FsZW5kYXJkAhAPZBYCAgEPDxYCHgtOYXZpZ2F0ZVVybAWwAWh0dHBzOi8vYXBwLWFzLnJlYWRzcGVha2VyLmNvbS9jZ2ktYmluL3JzZW50P2N1c3RvbWVyaWQ9Njk2NSZhbXA7bGFuZz1lbl9hdSZhbXA7cmVhZGlkPXJlYWRjb250ZW50JmFtcDt1cmw9aHR0cHMlM2ElMmYlMmZ3d3cuZ2VlbG9uZ2F1c3RyYWxpYS5jb20uYXUlMmZyZWN5Y2xpbmclMmZjYWxlbmRhci5hc3B4ZGQCEg8WAh8AaBYEAgEPZBYCZg9kFgZmDxYCHgVWYWx1ZQUPOGQ4YWQ3OTBkMWRlZjZmZAICDzwrAAoBAA8WBB4LXyFEYXRhQm91bmRnHwECAWQWAmYPZBYGZg8PFgIfAGhkZAIBD2QWAmYPZBYIAgEPFgIfBgUXQmluIGNvbGxlY3Rpb24gY2FsZW5kYXJkAgMPFgIfBgUTTW9uZGF5LCA1IEp1bmUgMjAyM2QCBQ8WAh8EBUtGaW5kIHlvdXIgY29sbGVjdGlvbiBkYXRlIGZvciB5b3VyIGdhcmJhZ2UsIGdyZWVuIHdhc3RlIGFuZCByZWN5Y2xpbmcgYmlucy5kAgcPFgIfBAWBBzwhLS0tPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyBhbGVydC1pY29uIj5XaGlsZSB0aGVyZSB3aWxsIGJlIDxzdHJvbmc+bm8gY2hhbmdlPC9zdHJvbmc+Jm5ic3A7dG8gcmVzaWRlbnRpYWwgd2FzdGUgY29sbGVjdGlvbiBvbiB0aGUgQ2hyaXN0bWFzIGFuZCBOZXcgWWVhcidzIHB1YmxpYyBob2xpZGF5cywgb3VyJm5ic3A7PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ2VlbG9uZ2F1c3RyYWxpYS5jb20uYXUvcmVjeWNsaW5nL2NlbnRyZS9hcnRpY2xlL2l0ZW0vOGNiODE4OGNlZmYxNTA2LmFzcHgiPnJlc291cmNlIGFuZCByZWNvdmVyeSBjZW50cmVzPC9hPiZuYnNwO3dpbGwgYmUgY2xvc2VkIG9uIENocmlzdG1hcyBEYXkgYW5kIE5ldyBZZWFyJ3MgRGF5LiZuYnNwOzwvZGl2PiEtLS0+DQo8cD4NCjxzdHJvbmc+Tm90ZTo8L3N0cm9uZz48L3A+DQo8dWw+DQogICAgPGxpPllvdSB3aWxsIG5lZWQgdG8gZW50ZXIgeW91ciBhZGRyZXNzIGluIHRoZSBjb3JyZWN0IGZvcm1hdCB0byBmaW5kIGl0LjxiciAvPg0KICAgIEV4YW1wbGVzOjxiciAvPg0KICAgIDxzdHJvbmc+MTU1IE1lcmNlciBTdHJlZXQgR2VlbG9uZyAzMjIwPC9zdHJvbmc+PGJyIC8+DQogICAgPHN0cm9uZz4xLzI3MSBSb3NseW4gUm9hZCBIaWdodG9uIDMyMTY8L3N0cm9uZz48YnIgLz4NCiAgICA8c3Ryb25nPjFhIE9ydG9uIFN0cmVldCBPY2VhbiBHcm92ZSAzMjI2PC9zdHJvbmc+PC9saT4NCiAgICA8bGk+U2VhcmNoIGZvciBhZGRyZXNzZXMgd2hpY2ggY292ZXIgYSByYW5nZSBvZiBzdHJlZXQgbnVtYmVycyBieSB1c2luZyBhIGRhc2guDQog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",
    "__EVENTVALIDATION": "/wEdAAi1v/BZgywsL3/V3yFKLfWNZBX5iWrINZCTIN9tE69sRcbs9peHpCSlkn89rsDNb+DS+PfBHKwIo4qs1Fr/jJ7WM4KAc9RmsO1tKxkiJA80y7Ktly48GpdZ2UlIqyldRAU5vOA1BPVA7FJ9SzEknmazyRFIzomhJ8GA9IbI1ircqsNO0zEuXfJnjjE4pebV51+PQx49jYyfnuvLeBt+9djB",
    "ctl00$ContentBody$BTN_SEARCH": "Search",
}

ADDRESS_FIELD = "ctl00$ContentBody$TB_SEARCH"


class Source:
    def __init__(
        self, address: str
    ):  # argX correspond to the args dict in the source configuration
        self._address = address
        self._submit_args = SUBMIT_ARGS.copy()
        self._submit_args[ADDRESS_FIELD] = f"{self._address}"

    def fetch(self):

        r = requests.post(API_URL, data=self._submit_args)
        r.raise_for_status()

        if "We couldn't find a match for" in r.text:
            raise Exception(
                f"No collection calendars are available for the selected property. Make sure your address returns entries on the council website ({API_URL})."
            )

        soup = BeautifulSoup(r.text, "html.parser")

        div = soup.find("div", id="ctl00_ContentBody_P_CALENDAR").find(
            "div", class_="read-text"
        )

        bins = div.find_all("h3", class_="heading-icon")
        next4s = div.find_all("ul")
        entries = []  # List that holds collection schedule

        for bin, next4 in zip(bins, next4s):
            t = bin.text.split(" (", 1)[0]
            dates = next4.find_all("li")
            for date in dates:
                entries.append(
                    Collection(
                        date=datetime.datetime.strptime(
                            date.text, "%A, %d %B %Y"
                        ).date(),
                        t=t,  # Collection type
                        icon=ICON_MAP.get(t),  # Collection icon
                    )
                )

        return entries
