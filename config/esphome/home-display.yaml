substitutions:
  gpio_spi_clk_pin: GPIO25
  gpio_spi_mosi_pin: GPIO26
  gpio_cs_pin: GPIO32
  gpio_busy_pin: GPIO33
  gpio_reset_pin: GPIO27
  gpio_dc_pin: GPIO0

esphome:
  name: homedisplay
  platform: ESP32
  board: lolin_d32_pro

wifi:
  use_address: homedisplay.lan
  ssid: !secret esphome_wifi_ssid
  password: !secret esphome_wifi_password

  ap:
    ssid: esp01

captive_portal:

logger:

api:
  password: !secret esphome_api_password

ota:
  password: !secret esphome_ota_password

spi:
  clk_pin: $gpio_spi_clk_pin
  mosi_pin: $gpio_spi_mosi_pin
  id: epaper_display

time:
  - platform: sntp
    timezone: Europe/Berlin
    id: sntp_time
    on_time:
      # Every 1 minutes
      - seconds: 0
        then:
          - display.page.show_next: epaper
          - component.update: epaper

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: homeassistant
    entity_id: sensor.garden_temperature
    id: garden_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.garden_humidity
    id: garden_humidity
    accuracy_decimals: 0
    internal: true

  - platform: homeassistant
    entity_id: sensor.livingroom_temperature
    id: indoor_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.livingroom_humidity
    id: indoor_humidity
    accuracy_decimals: 0
    internal: true

  - platform: homeassistant
    entity_id: sensor.solaredge_imported_energy
    id: imported_energy
    internal: true
    filters:
      - multiply: 0.001

  - platform: homeassistant
    entity_id: sensor.solaredge_exported_energy
    id: exported_energy
    internal: true
    filters:
      - multiply: 0.001

  - platform: homeassistant
    entity_id: sensor.solaredge_consumption_energy
    id: consumption_energy
    internal: true
    filters:
      - multiply: 0.001

  - platform: homeassistant
    entity_id: sensor.solaredge_storage_level
    id: storage_level
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true

  - platform: homeassistant
    entity_id: sensor.solaredge_energy_today
    id: energy_today
    internal: true
    filters:
      - multiply: 0.001

  - platform: homeassistant
    entity_id: sensor.pool_solar_temperature
    id: pool_solar_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.pool_water_temperature_1
    id: pool_water_temperature
    internal: true

binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.pool_pump_state
    id: pool_pump_state
    internal: true

  - platform: homeassistant
    entity_id: binary_sensor.pool_valve_state
    id: pool_valve_state
    internal: true

display:
  - platform: waveshare_epaper
    id: epaper
    cs_pin: $gpio_cs_pin
    busy_pin: $gpio_busy_pin
    reset_pin: $gpio_reset_pin
    dc_pin: $gpio_dc_pin
    model: 2.90in
    rotation: 90°
    # 296x128 pixels
    update_interval: 3600s
    pages:
      - id: page1
        lambda: |-
          int x, y;
          ESP_LOGI("display", "Updating Page 1...");

          // block headline
          it.print(2, 25, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F0241");
          it.print(22, 25, id(font_regular_20), TextAlign::BASELINE_LEFT, "Energie");
          it.line(100, 25, 184, 25);

          // Time & Temp box
          it.strftime(242, 36, id(clock_font), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
          it.strftime(242, 65, id(font_regular_20), TextAlign::BASELINE_CENTER, "%d.%m.%y", id(sntp_time).now());
          if (id(garden_temp).has_state()) {
            it.print(200, 110, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
            it.printf(220, 110, id(font_regular_20), TextAlign::BASELINE_LEFT, "%.1f°C", id(garden_temp).state);
          }
          it.line(188, 2, 188, 126);

          if (id(energy_today).has_state()) {
            it.print(6, 50, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F1A74");
            it.printf(29, 49, id(font_regular_16), TextAlign::BASELINE_LEFT, "%.1fkWh", id(energy_today).state);
          }
          if (id(storage_level).has_state()) {
            x = 115, y = 50;
            if (id(storage_level).state <= 33) {
              it.print(x, y, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F12A1");
            } else if (id(storage_level).state <= 66) {
              it.print(x, y, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F12A2");
            } else {
              it.print(x, y, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F12A3");
            }
            it.printf(x+23, y-1, id(font_regular_16), TextAlign::BASELINE_LEFT, "%2.0f%%", id(storage_level).state);
          }
          if (id(consumption_energy).has_state()) {
            it.print(6, 80, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F1904");
            it.printf(29, 79, id(font_regular_16), TextAlign::BASELINE_LEFT, "%.1fkWh", id(consumption_energy).state);
          }

          if (id(exported_energy).has_state()) {
            it.print(6, 124, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F192C");
            it.printf(29, 123, id(font_regular_16), TextAlign::BASELINE_LEFT, "%.1fkWh", id(exported_energy).state);
          }
          if (id(imported_energy).has_state()) {
            it.print(100, 124, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F192D");
            it.printf(123, 123, id(font_regular_16), TextAlign::BASELINE_LEFT, "%.1fkWh", id(imported_energy).state);
          }

      - id: page2
        lambda: |-
          ESP_LOGI("display", "Updating Page 2...");

          // block headline
          it.print(2, 25, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F0606");
          it.print(22, 25, id(font_regular_20), TextAlign::BASELINE_LEFT, "Pool");
          it.line(70, 25, 184, 25);

          // Time & Temp box
          it.strftime(242, 36, id(clock_font), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
          it.strftime(242, 65, id(font_regular_20), TextAlign::BASELINE_CENTER, "%d.%m.%y", id(sntp_time).now());
          if (id(garden_temp).has_state()) {
            it.print(200, 110, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
            it.printf(220, 110, id(font_regular_20), TextAlign::BASELINE_LEFT, "%.1f°C", id(garden_temp).state);
          }
          it.line(188, 2, 188, 126);

          if (id(pool_pump_state).has_state()) {
            it.print(6, 50, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F1402");
            it.printf(29, 49, id(font_regular_16), TextAlign::BASELINE_LEFT, "Pumpe: %s", id(pool_pump_state).state ? "An" : "Aus");
          }
          if (id(pool_valve_state).has_state()) {
            it.print(6, 75, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F17FF");
            it.printf(29, 74, id(font_regular_16), TextAlign::BASELINE_LEFT, "Solarheizung: %s", id(pool_valve_state).state ? "An" : "Aus");
          }
          if (id(pool_water_temperature).has_state()) {
              it.print(6, 100, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F03C8");
              it.printf(29, 99, id(font_regular_16), TextAlign::BASELINE_LEFT, "Wasser: %.1f°C", id(pool_water_temperature).state);
          }
          if (id(pool_solar_temperature).has_state()) {
              it.print(9, 124, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F0599");
              it.printf(29, 123, id(font_regular_16), TextAlign::BASELINE_LEFT, "Heizung: %.1f°C", id(pool_solar_temperature).state);
          }

      - id: page3
        lambda: |-
          ESP_LOGI("display", "Updating Page 3...");

          // block headline
          it.print(2, 25, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
          it.print(22, 25, id(font_regular_20), TextAlign::BASELINE_LEFT, "Temperatur");
          it.line(138, 25, 185, 25);

          // Time & Temp box
          it.strftime(242, 36, id(clock_font), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
          it.strftime(242, 65, id(font_regular_20), TextAlign::BASELINE_CENTER, "%d.%m.%y", id(sntp_time).now());
          if (id(garden_temp).has_state()) {
            it.print(200, 110, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
            it.printf(220, 110, id(font_regular_20), TextAlign::BASELINE_LEFT, "%.1f°C", id(garden_temp).state);
          }
          it.line(188, 2, 188, 126);

          it.print(56, 50, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F18D7");
          it.print(79, 49, id(font_regular_18), TextAlign::BASELINE_LEFT, "Außen");
          it.print(56, 97, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F0F55");
          it.print(79, 96, id(font_regular_18), TextAlign::BASELINE_LEFT, "Innen");

          if (id(garden_temp).has_state()) {
            it.print(25, 73, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
            it.printf(45, 72, id(font_regular_18), TextAlign::BASELINE_LEFT, "%.1f°C", id(garden_temp).state);
          }
          if (id(garden_humidity).has_state()) {
            it.print(108, 73, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F058E");
            it.printf(130, 72, id(font_regular_18), TextAlign::BASELINE_LEFT, "%.0f%%", id(garden_humidity).state);
          }
          if (id(indoor_temp).has_state()) {
            it.print(25, 120, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
            it.printf(45, 119, id(font_regular_18), TextAlign::BASELINE_LEFT, "%.1f°C", id(indoor_temp).state);
          }
          if (id(indoor_humidity).has_state()) {
            it.print(108, 120, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F058E");
            it.printf(130, 119, id(font_regular_18), TextAlign::BASELINE_LEFT, "%.0f%%", id(indoor_humidity).state);
          }

      # - id: page4
      #   lambda: |-
      #     ESP_LOGI("display", "Updating Page 4...");

      #     // block headline
      #     it.print(2, 22, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F010B");
      #     it.print(22, 22, id(font_regular_20), TextAlign::BASELINE_LEFT, "Car");
      #     it.line(58, 22, 185, 22);

      #     // Time & Temp box
      #     it.strftime(242, 32, id(clock_font), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
      #     it.strftime(242, 60, id(font_regular_20), TextAlign::BASELINE_CENTER, "%d.%m.%y", id(sntp_time).now());
      #     if (id(garden_temp).has_state()) {
      #       it.print(200, 110, id(icon_font_20), TextAlign::BASELINE_LEFT, "\U000F050F");
      #       it.printf(220, 110, id(font_regular_20), TextAlign::BASELINE_LEFT, "%.1f°C", id(garden_temp).state);
      #     }
      #     it.line(188, 2, 188, 126);

font:
  - file: 'fonts/GoogleSans-Bold.ttf'
    id: clock_font
    size: 40
    glyphs: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ':']
  - file: 'fonts/GoogleSans-Bold.ttf'
    id: font_regular_16
    size: 16
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/', 'ß', '<', '>']
  - file: 'fonts/GoogleSans-Bold.ttf'
    id: font_regular_18
    size: 18
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/', 'ß']
  - file: 'fonts/GoogleSans-Bold.ttf'
    id: font_regular_20
    size: 20
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/', 'ß']
  - file: 'fonts/GoogleSans-Medium.ttf'
    id: font_regular_40
    size: 40
    glyphs:
      ['!', ',', '.', '"', '%', '-', '_', ':', '°', '/',
       '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ']
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_18
    size: 18
    glyphs:
      - "󰉁"  # mdi-flash
      - "󰘆"  # mid-pool
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_20
    size: 20
    glyphs:
      - "\U000F010B"  # mdi-car
      - "\U000F0F55"  # mdi-home-thermometer-outline
      - "\U000F0241"  # mdi-flash
      - "\U000F0606"  # mdi-pool
      - "\U000F1402"  # mdi-pump
      - "\U000F03C8"  # mdi-coolant-temperature
      - "\U000F18D7"  # mdi-sun-thermometer-outline
      - "\U000F17FF"  # mdi-sun-wireless-outline
      - "\U000F0599"  # mdi-weather-sunny
      - "\U000F058E"  # mdi-water-percent
      - "\U000F050F"  # mdi-thermometer
      - "\U000F1A74"  # mdi-solar-power-variant
      - "\U000F192D"  # mdi-transmission-tower-import
      - "\U000F192C"  # mdi-transmission-tower-export
      - "\U000F12A1"  # mdi-battery-low
      - "\U000F12A2"  # mdi-battery-medium
      - "\U000F12A3"  # mdi-battery-high
      - "\U000F1904"  # mdi-home-lightning-bolt-outline
